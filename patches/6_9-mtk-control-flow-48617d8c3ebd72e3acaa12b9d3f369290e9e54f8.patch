From 48617d8c3ebd72e3acaa12b9d3f369290e9e54f8 Mon Sep 17 00:00:00 2001
From: David Bentham <db260179@gmail.com>
Date: Sun, 26 Dec 2021 13:46:00 +0000
Subject: [PATCH] ramips: mediatek: MT7621 has a bug that can be triggered by
 Flow Control, so for now we disable FC mode.

Signed-off-by: David Bentham <db260179@gmail.com>
(cherry picked from commit c2ae77ac0da62d01ae26566750bc67d922aeae48)
Signed-off-by: Mikhail Zhilkin <csharper2005@gmail.com>
---
 ...-mediatek-MT7621-disable-flowcontrol.patch | 90 +++++++++++++++++++
 1 file changed, 90 insertions(+)
 create mode 100644 target/linux/ramips/patches-5.4/402-net-ethernet-mediatek-MT7621-disable-flowcontrol.patch

diff --git a/target/linux/ramips/patches-5.4/402-net-ethernet-mediatek-MT7621-disable-flowcontrol.patch b/target/linux/ramips/patches-5.4/402-net-ethernet-mediatek-MT7621-disable-flowcontrol.patch
new file mode 100644
index 0000000000..88a88b029d
--- /dev/null
+++ b/target/linux/ramips/patches-5.4/402-net-ethernet-mediatek-MT7621-disable-flowcontrol.patch
@@ -0,0 +1,90 @@
+--- a/drivers/net/dsa/mt7530.c
++++ b/drivers/net/dsa/mt7530.c
+@@ -1278,6 +1278,17 @@ mt7530_setup(struct dsa_switch *ds)
+ 	val |= MHWTRAP_MANUAL;
+ 	mt7530_write(priv, MT7530_MHWTRAP, val);
+ 
++	/* MT7621 a bug prevents Flow Control to work reliably; so for now we disable it */
++	usleep_range(10, 20);
++
++	val = mt7530_read(priv, 0x1FE0);
++	val &= ~BIT(31);
++	mt7530_write(priv, 0x1FE0, val);
++
++	mt7530_write(priv, MT7530_PMCR_P(5), 0x5e30b);
++	mt7530_write(priv, MT7530_PMCR_P(6), 0x5e30b);
++	usleep_range(10, 20);
++
+ 	priv->p6_interface = PHY_INTERFACE_MODE_NA;
+ 
+ 	/* Enable and reset MIB counters */
+@@ -1395,8 +1406,7 @@ static void mt7530_phylink_mac_config(st
+ 
+ 	mcr_cur = mt7530_read(priv, MT7530_PMCR_P(port));
+ 	mcr_new = mcr_cur;
+-	mcr_new &= ~(PMCR_FORCE_SPEED_1000 | PMCR_FORCE_SPEED_100 |
+-		     PMCR_FORCE_FDX | PMCR_TX_FC_EN | PMCR_RX_FC_EN);
++	mcr_new &= ~(PMCR_FORCE_SPEED_1000 | PMCR_FORCE_SPEED_100 | PMCR_FORCE_FDX);
+ 	mcr_new |= PMCR_IFG_XMIT(1) | PMCR_MAC_MODE | PMCR_BACKOFF_EN |
+ 		   PMCR_BACKPR_EN | PMCR_FORCE_MODE;
+ 
+@@ -1416,12 +1426,9 @@ static void mt7530_phylink_mac_config(st
+ 			mcr_new |= PMCR_FORCE_EEE100;
+ 		break;
+ 	}
++
+ 	if (state->duplex == DUPLEX_FULL) {
+ 		mcr_new |= PMCR_FORCE_FDX;
+-		if (state->pause & MLO_PAUSE_TX)
+-			mcr_new |= PMCR_TX_FC_EN;
+-		if (state->pause & MLO_PAUSE_RX)
+-			mcr_new |= PMCR_RX_FC_EN;
+ 	}
+ 
+ 	if (mcr_new != mcr_cur)
+@@ -1502,9 +1509,6 @@ unsupported:
+ 		}
+ 	}
+ 
+-	phylink_set(mask, Pause);
+-	phylink_set(mask, Asym_Pause);
+-
+ 	linkmode_and(supported, supported, mask);
+ 	linkmode_and(state->advertising, state->advertising, mask);
+ }
+--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
++++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+@@ -374,10 +374,6 @@ static void mtk_mac_config(struct phylin
+ 	}
+ 	if (state->duplex == DUPLEX_FULL) {
+ 		mcr_new |= MAC_MCR_FORCE_DPX;
+-		if (state->pause & MLO_PAUSE_TX)
+-			mcr_new |= MAC_MCR_FORCE_TX_FC;
+-		if (state->pause & MLO_PAUSE_RX)
+-			mcr_new |= MAC_MCR_FORCE_RX_FC;
+ 	}
+ 
+ 	/* Only update control register when needed! */
+@@ -421,12 +417,6 @@ static int mtk_mac_link_state(struct phy
+ 		break;
+ 	}
+ 
+-	state->pause &= (MLO_PAUSE_RX | MLO_PAUSE_TX);
+-	if (pmsr & MAC_MSR_RX_FC)
+-		state->pause |= MLO_PAUSE_RX;
+-	if (pmsr & MAC_MSR_TX_FC)
+-		state->pause |= MLO_PAUSE_TX;
+-
+ 	return 1;
+ }
+ 
+@@ -535,9 +525,6 @@ static void mtk_validate(struct phylink_
+ 		}
+ 	}
+ 
+-	phylink_set(mask, Pause);
+-	phylink_set(mask, Asym_Pause);
+-
+ 	linkmode_and(supported, supported, mask);
+ 	linkmode_and(state->advertising, state->advertising, mask);
+ 
-- 
GitLab

