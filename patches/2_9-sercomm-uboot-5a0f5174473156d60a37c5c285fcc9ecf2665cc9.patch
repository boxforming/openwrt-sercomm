From 5a0f5174473156d60a37c5c285fcc9ecf2665cc9 Mon Sep 17 00:00:00 2001
From: Mikhail Zhilkin <csharper2005@gmail.com>
Date: Wed, 22 Sep 2021 16:12:02 +0000
Subject: [PATCH] ramips: add support for Beeline(Sercomm) U-Boot

- Add recipe for several Beeline/Sercomm devices (e.g., Beeline SmartBox
  GIGA, Beeline SmartBox Turbo+, Sercomm S3) that appends special header
  to a kernel.

- Add device variables KERNEL_LOADADDR, LZMA_TEXT_START. It's also
  necessary for the devices mentioned above.

Signed-off-by: Mikhail Zhilkin <csharper2005@gmail.com>
(cherry picked from commit 6240da24f4c1442b0f750f06be512f630b0bc6c8)
Signed-off-by: Mikhail Zhilkin <csharper2005@gmail.com>
---
 scripts/sercomm-kernel.sh          | 122 +++++++++++++++++++++++++++++
 target/linux/ramips/image/Makefile |  16 +++-
 2 files changed, 135 insertions(+), 3 deletions(-)
 create mode 100755 scripts/sercomm-kernel.sh

diff --git a/scripts/sercomm-kernel.sh b/scripts/sercomm-kernel.sh
new file mode 100755
index 0000000000..6ce3086c9e
--- /dev/null
+++ b/scripts/sercomm-kernel.sh
@@ -0,0 +1,122 @@
+#!/usr/bin/env bash
+# SPDX-License-Identifier: GPL-2.0-or-later
+#
+# Copyright (c) 2021 Mikhail Zhilkin <csharper2005@gmail.com>
+#
+###
+### sercomm-kernel.sh  - calculates and appends a special kernel header.
+###                      Intended for some Sercomm devices (e.g., Beeline
+###                      SmartBox GIGA, Beeline SmartBox Turbo+, Sercomm
+###                      S3).
+#
+# Credits to @kar200 for the header description. More details are here:
+# https://forum.openwrt.org/t/add-support-for-sercomm-s3-on-stock-uboot
+#
+if [ $# -ne 3 ]; then
+	echo "SYNTAX: $0 <kernel> <kernel_offset> <rootfs_offset>"
+	exit 1
+fi
+
+FILE_TMP=$1.shdr
+KERNEL_IMG=$1
+KERNEL_OFFSET=$2
+ROOTFS_OFFSET=$3
+
+# Sercomm HDR (0x53657200), 0xffffffff for hdr crc32 calc
+hdr_sign_offs=0x0
+hdr_sign_val=0x53657200
+# Absoulte lenght for Sercomm footer
+hdr_footer_size_offs=0x4
+hdr_footer_size_val=
+# Header checksum. 0xffffffff for hdr crc32 calc
+hdr_head_chksum_offs=0x8
+hdr_head_chksum_val=
+# Magic constant (0x2ffffff)
+hdr_int04_offs=0xc
+hdr_int04_val=0x2ffffff
+# Kernel flash offset
+hdr_kern_offs_offs=0x10
+hdr_kern_offs_val=$KERNEL_OFFSET
+# Kernel lenght
+hdr_kern_len_offs=0x14
+hdr_kern_len_val=
+# Kernel checksum
+hdr_kern_chksum_offs=0x18
+hdr_kern_chksum_val=
+# Magic constant (0x0)
+hdr_int08_offs=0x1c
+hdr_int08_val=0x0
+# Rootfs flash offset
+hdr_rootfs_offs_offs=0x28
+hdr_rootfs_offs_val=$ROOTFS_OFFSET
+# Rootfs flash lenght. We're checking only first 4 bytes
+hdr_rootfs_len_offs=0x2c
+hdr_rootfs_len_val=0x4
+# Rootfs checksum. Checksum is a constant for UBI (first 4 bytes)
+hdr_rootfs_chksum_offs=0x30
+hdr_rootfs_chksum_val=0x1cfc552d
+# Magic constant (0x0)
+hdr_int10_offs=0x34
+hdr_int10_val=0x0
+
+pad_zeros () {
+	awk '{ printf "%8s\n", $0 }' | sed 's/ /0/g'
+}
+
+# Remove leading 0x
+trim_hx () {
+	printf "%x\n" $1 | pad_zeros
+}
+
+# Change endian
+swap_hx () {
+	pad_zeros | awk '{for (i=7;i>=1;i=i-2) printf "%s%s", \
+		substr($1,i,2), (i>1?"":"\n")}'
+}
+
+# Check file size
+fsize () {
+	printf "%x\n" `stat -c "%s" $1`
+}
+
+# Calculate checksum
+chksum () {
+	dd if=$1 2>/dev/null | gzip -c | tail -c 8 | od -An -tx4 -N4 \
+		--endian=big | tr -d ' \n' | pad_zeros
+}
+
+# Write 4 bytes in the header by offset
+write_hdr () {
+	echo -ne "$(echo $1 | sed 's/../\\x&/g')" | dd of=$FILE_TMP bs=1 \
+	seek=$(($2)) count=4 conv=notrunc status=none 2>/dev/null
+}
+
+# Pad a new header with 0xff
+dd if=/dev/zero ibs=1 count=256 status=none | tr "\000" "\377" > \
+	$FILE_TMP 2>/dev/null
+
+# Write constants
+write_hdr $(trim_hx $hdr_int04_val) $hdr_int04_offs
+write_hdr $(trim_hx $hdr_int08_val) $hdr_int08_offs
+write_hdr $(trim_hx $hdr_int10_val) $hdr_int10_offs
+# Write footer data
+hdr_footer_size_val=$(($hdr_rootfs_offs_val + $hdr_rootfs_len_val))
+write_hdr $(trim_hx $hdr_footer_size_val | swap_hx) $hdr_footer_size_offs
+# Write kernel data
+write_hdr $(trim_hx $hdr_kern_offs_val | swap_hx) $hdr_kern_offs_offs
+hdr_kern_len_val=$(fsize $KERNEL_IMG | pad_zeros)
+write_hdr $(echo $hdr_kern_len_val | swap_hx) $hdr_kern_len_offs
+hdr_kern_chksum_val=$(chksum $KERNEL_IMG)
+write_hdr $hdr_kern_chksum_val $hdr_kern_chksum_offs
+# Write rootfs data
+write_hdr $(trim_hx $hdr_rootfs_offs_val | swap_hx) $hdr_rootfs_offs_offs
+write_hdr $(trim_hx $hdr_rootfs_len_val | swap_hx) $hdr_rootfs_len_offs
+write_hdr $(trim_hx $hdr_rootfs_chksum_val) $hdr_rootfs_chksum_offs
+# Write header checksum
+hdr_head_chksum_val=$(chksum $FILE_TMP)
+write_hdr $hdr_head_chksum_val $hdr_head_chksum_offs
+# Place Sercomm signature
+write_hdr $(trim_hx $hdr_sign_val) $hdr_sign_offs
+
+dd if=$KERNEL_IMG >> $FILE_TMP
+mv $FILE_TMP $KERNEL_IMG
diff --git a/target/linux/ramips/image/Makefile b/target/linux/ramips/image/Makefile
index 5937970a37..b108363883 100644
--- a/target/linux/ramips/image/Makefile
+++ b/target/linux/ramips/image/Makefile
@@ -5,12 +5,13 @@
 include $(TOPDIR)/rules.mk
 include $(INCLUDE_DIR)/image.mk
 
-DEVICE_VARS += LOADER_TYPE LOADER_FLASH_OFFS
+DEVICE_VARS += LOADER_TYPE LOADER_FLASH_OFFS LZMA_TEXT_START
 DEVICE_VARS += NETGEAR_BOARD_ID NETGEAR_HW_ID
 DEVICE_VARS += BUFFALO_TAG_PLATFORM BUFFALO_TAG_VERSION BUFFALO_TAG_MINOR
 DEVICE_VARS += SEAMA_SIGNATURE SEAMA_MTDBLOCK
 DEVICE_VARS += SERCOMM_HWNAME SERCOMM_HWID SERCOMM_HWVER SERCOMM_SWVER
 DEVICE_VARS += SERCOMM_PAD JCG_MAXSIZE
+DEVICE_VARS += SERCOMM_KERNEL_OFFSET SERCOMM_ROOTFS_OFFSET
 
 loadaddr-y := 0x80000000
 loadaddr-$(CONFIG_TARGET_ramips_rt288x) := 0x88000000
@@ -22,7 +23,7 @@ ldrplatform-$(CONFIG_TARGET_ramips_mt7621) := mt7621
 ldrflashstart-y := 0x1c000000
 ldrflashstart-$(CONFIG_TARGET_ramips_mt7621) := 0x1fc00000
 
-KERNEL_LOADADDR := $(loadaddr-y)
+LOADADDR := $(loadaddr-y)
 LOADER_PLATFORM := $(ldrplatform-y)
 LOADER_FLASH_START := $(ldrflashstart-y)
 
@@ -46,7 +47,8 @@ define Build/loader-common
 		PKG_BUILD_DIR="$@.src" \
 		TARGET_DIR="$(dir $@)" LOADER_NAME="$(notdir $@)" \
 		BOARD="$(BOARDNAME)" PLATFORM="$(LOADER_PLATFORM)" \
-		LZMA_TEXT_START=0x81800000 LOADADDR=$(KERNEL_LOADADDR) \
+		LZMA_TEXT_START=$(LZMA_TEXT_START) \
+		LOADADDR=$(LOADADDR) \
 		$(1) compile loader.$(LOADER_TYPE)
 	mv "$@.$(LOADER_TYPE)" "$@"
 	rm -rf $@.src
@@ -117,6 +119,12 @@ define Build/sercom-footer
 	$(call Build/sercom-seal,-f)
 endef
 
+define Build/sercomm-kernel
+	$(TOPDIR)/scripts/sercomm-kernel.sh $@ \
+		$(SERCOMM_KERNEL_OFFSET) \
+		$(SERCOMM_ROOTFS_OFFSET)
+endef
+
 define Build/sercom-seal
 	$(STAGING_DIR_HOST)/bin/mksercommfw \
 		-i $@ \
@@ -159,6 +167,8 @@ endef
 
 define Device/Default
   PROFILES = Default
+  KERNEL_LOADADDR := $(loadaddr-y)
+  LZMA_TEXT_START := 0x81800000
   KERNEL := $(KERNEL_DTB) | uImage lzma
   SOC := $(DEFAULT_SOC)
   DEVICE_DTS_DIR := ../dts
-- 
GitLab

